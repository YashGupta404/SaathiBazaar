// saathi-bazaar-backend/routes/auth.js
const express = require('express'); // Imports Express to create routes
const User = require('../models/User'); // Imports the User model (blueprint for users in MongoDB)

module.exports = (auth) => { // This function receives the 'auth' object from Firebase Admin SDK (passed from server.js)
  const router = express.Router(); // Creates an Express Router

  // POST /api/auth/register: Route for user registration
  // This receives user data AFTER Firebase client-side authentication is done
  router.post('/register', async (req, res) => {
    // Frontend sends: email, password, name, contact, shop_name, location, and Firebase 'uid'
    const { email, password, name, contact, shop_name, location, uid } = req.body;
    try {
      // Create a new User document in MongoDB using the provided data
      const newUser = new User({
        uid, // This is the unique User ID generated by Firebase Auth, crucial for linking
        email, // Storing email is good practice, though not strictly required by User schema for simplicity
        name,
        contact,
        shop_name,
        location: { lat: location.lat, long: location.long } // Store location in lat/long format
      });
      await newUser.save(); // Save the new user's data to MongoDB
      res.status(201).send({ message: 'User registered successfully!' }); // Send success response
    } catch (error) {
      console.error('Registration error:', error.message);
      res.status(400).send({ error: error.message }); // Send error if registration fails (e.g., duplicate UID)
    }
  });

  // POST /api/auth/login: Route for user login verification (Backend checks the token)
  // The actual login happens on the frontend with Firebase client SDK. This route is for backend verification/data retrieval.
  router.post('/login', async (req, res) => {
    const { idToken } = req.body; // Frontend sends Firebase ID token here
    try {
      const decodedToken = await auth.verifyIdToken(idToken); // Verify the token's authenticity with Firebase Admin SDK
      const user = await User.findOne({ uid: decodedToken.uid }); // Find the user in MongoDB using their Firebase UID
      if (!user) {
        return res.status(404).send({ error: 'User data not found in database.' }); // User registered with Firebase but not in MongoDB
      }
      res.status(200).send({ message: 'Logged in successfully!', user }); // Send user data back to frontend
    } catch (error) {
      console.error('Login error:', error.message);
      res.status(401).send({ error: 'Unauthorized or invalid token.' }); // Send error if token is invalid or expired
    }
  });

  return router; // Return the configured router
};